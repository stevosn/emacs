* make sure that this file is read
put in
(org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))
to read the orgfile as a myinit.el file! (which is created by org-babel..)
* benchmarking
#+BEGIN_SRC emacs-lisp
(defun sanityinc/time-subtract-millis (b a)
  (* 1000.0 (float-time (time-subtract b a))))


(defvar sanityinc/require-times nil
  "A list of (FEATURE LOAD-START-TIME LOAD-DURATION).
LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

(defadvice require (around sanityinc/build-require-times (feature &optional filename noerror) activate)
  "Note in `sanityinc/require-times' the time taken to require each feature."
  (let* ((already-loaded (memq feature features))
         (require-start-time (and (not already-loaded) (current-time))))
    (prog1
        ad-do-it
      (when (and (not already-loaded) (memq feature features))
        (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time)))
          (add-to-list 'sanityinc/require-times
                       (list feature require-start-time time)
                       t))))))

(define-derived-mode sanityinc/require-times-mode tabulated-list-mode "Require-Times"
  "Show times taken to `require' packages."
  (setq tabulated-list-format
        [("Start time (ms)" 20 sanityinc/require-times-sort-by-start-time-pred)
         ("Feature" 30 t)
         ("Time (ms)" 12 sanityinc/require-times-sort-by-load-time-pred)])
  (setq tabulated-list-sort-key (cons "Start time (ms)" nil))
  ;; (setq tabulated-list-padding 2)
  (setq tabulated-list-entries #'sanityinc/require-times-tabulated-list-entries)
  (tabulated-list-init-header)
  (tablist-minor-mode))

(defun sanityinc/require-times-sort-by-start-time-pred (entry1 entry2)
  (< (string-to-number (elt (nth 1 entry1) 0))
     (string-to-number (elt (nth 1 entry2) 0))))

(defun sanityinc/require-times-sort-by-load-time-pred (entry1 entry2)
  (> (string-to-number (elt (nth 1 entry1) 2))
     (string-to-number (elt (nth 1 entry2) 2))))

(defun sanityinc/require-times-tabulated-list-entries ()
  (cl-loop for (feature start-time millis) in sanityinc/require-times
           with order = 0
           do (incf order)
           collect (list order
                         (vector
                          (format "%.3f" (sanityinc/time-subtract-millis start-time before-init-time))
                          (symbol-name feature)
                          (format "%.3f" millis)))))

(defun sanityinc/require-times ()
  "Show a tabular view of how long various libraries took to load."
  (interactive)
  (with-current-buffer (get-buffer-create "*Require Times*")
    (sanityinc/require-times-mode)
    (tabulated-list-revert)
    (display-buffer (current-buffer))))

(defun sanityinc/show-init-time ()
  (message "init completed in %.2fms"
           (sanityinc/time-subtract-millis after-init-time before-init-time)))

(add-hook 'after-init-hook 'sanityinc/show-init-time)
#+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
;; don't accelerate scrolling
(setq mouse-wheel-progressive-speed nil)
;; F5 for reloading the file
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* preload-local
#+BEGIN_SRC emacs-lisp
;; line number configuration
(global-linum-mode t)  ;show line number

;; disable line number display for some modes
(setq linum-disabled-modes-list '(eshell-mode shell-mode term-mode org-mode text-mode inferior-python-mode TeX-output-mode compilation-mode comint-mode blog-admin-mode gnus-group-mode gnus-article-mode bbdb-mode))
(defun linum-on ()
  (unless (or (minibufferp)
			  (member major-mode linum-disabled-modes-list))
	(linum-mode 1)))

;;;cursor stop blinking
;; (blink-cursor-mode -1)
;; (transient-mark-mode 1)

;; ;;;highlight the current row
;; (require 'hl-line)
;; (global-hl-line-mode t)

;; change backup file directory
(setq backup-directory-alist `(("." . "~/.emacs_backups")))

;; stop creating those #auto-save# files
(setq auto-save-default nil)

;; make typing delete/overwrites selected text
(delete-selection-mode 1)

;; auto insert closing bracket
(electric-pair-mode 1)

;; turn on bracket match highlight
(show-paren-mode 1)

;; accept y/n for yes/no
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* require-package
#+BEGIN_SRC emacs-lisp
;;; On-demand installation of packages
  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (if (boundp 'package-selected-packages)
              ;; Record this as a package the user installed explicitly
              (package-install package nil)
            (package-install package))
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))


  (defun maybe-require-package (package &optional min-version no-refresh)
    "Try to install PACKAGE, and return non-nil if successful.
  In the event of failure, return nil and print a warning message.
  Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
  available package lists will not be re-downloaded in order to
  locate PACKAGE."
    (condition-case err
        (require-package package min-version no-refresh)
      (error
       (message "Couldn't install optional package `%s': %S" package err)
       nil)))
#+END_SRC
* elpa
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;;; Install into separate package dirs for each Emacs version, to prevent bytecode incompatibility
  (let ((versioned-package-dir
         (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                           user-emacs-directory)))
    (setq package-user-dir versioned-package-dir))

  ;;; Standard package repositories

  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; Official MELPA Mirror, in case necessary.
    ;;(add-to-list 'package-archives (cons "melpa-mirror" (concat proto "://www.mirrorservice.org/sites/melpa.org/packages/")) t)
    (if (< emacs-major-version 24)
        ;; For important compatibility libraries like cl-lib
        (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))
      (unless no-ssl
        ;; Force SSL for GNU ELPA
        (setcdr (assoc "gnu" package-archives) "https://elpa.gnu.org/packages/"))))

  ;; We include the org repository for completeness, but don't normally
  ;; use it.
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

  ;;; Fire up package.el
  (setq package-enable-at-startup nil)
  (package-initialize)

  (require-package 'fullframe)
  (fullframe list-packages quit-window)

  (require-package 'cl-lib)
  (require 'cl-lib)

  (defun sanityinc/set-tabulated-list-column-width (col-name width)
    "Set any column with name COL-NAME to the given WIDTH."
    (when (> width (length col-name))
      (cl-loop for column across tabulated-list-format
               when (string= col-name (car column))
               do (setf (elt column 1) width))))

  (defun sanityinc/maybe-widen-package-menu-columns ()
    "Widen some columns of the package menu table to avoid truncation."
    (when (boundp 'tabulated-list-format)
      (sanityinc/set-tabulated-list-column-width "Version" 13)
      (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
        (sanityinc/set-tabulated-list-column-width "Archive" longest-archive-name))))

  (add-hook 'package-menu-mode-hook 'sanityinc/maybe-widen-package-menu-columns)
#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
;; (require-package 'color-theme-sanityinc-solarized)
;; (require-package 'color-theme-sanityinc-tomorrow)

;; ;; If you don't customize it, this is the theme you get.
;; (when *is-a-mac*
;;   (setq-default custom-enabled-themes '(sanityinc-solarized-light)))
;; (when *is-a-linux*
;;   (setq-default custom-enabled-themes '(sanityinc-solarized-dark)))
;; (when *is-a-windows*
;;       (setq-default custom-enabled-themes '(sanityinc-solarized-light)))

;; ;; Ensure that themes will be applied even if they have not been customized
;; (defun reapply-themes ()
;;   "Forcibly load the themes listed in `custom-enabled-themes'."
;;   (dolist (theme custom-enabled-themes)
;;     (unless (custom-theme-p theme)
;;       (load-theme theme)))
;;   (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))
;; (add-hook 'after-init-hook 'reapply-themes)

;;------------------------------------------------------------------------------
;; Toggle between light and dark
;;------------------------------------------------------------------------------
;; (defun light ()
;;   "Activate a light color theme."
;;   (interactive)
;;   (color-theme-sanityinc-solarized-light)
;;   (reapply-themes))

;; (defun dark ()
;;   "Activate a dark color theme."
;;   (interactive)
;;   (color-theme-sanityinc-solarized-dark)
;;   (reapply-themes))

(when (maybe-require-package 'dimmer)
  (setq-default dimmer-fraction 0.1)
  (add-hook 'after-init-hook 'dimmer-mode))


;;------------------------------------------------------------------------------
;; Theme Configuration for Org-mode
;;------------------------------------------------------------------------------

;; leuven is a good theme for org-mode and you can switch to it if you want
(require-package 'leuven-theme)
;; (setq org-fontify-whole-heading-line t)
;; (require-package 'load-theme-buffer-local)

;; (add-hook 'org-mode-hook
;; 		  (lambda nil (load-theme-buffer-local 'leuven (current-buffer))))

;; (add-hook 'org-mode-hook
;; 		  (lambda ()
;; 			(load-theme 'leuven t)
;; 			(setq org-fontify-whole-heading-line t)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(custom-enabled-themes (quote (misterioso)))
 '(inhibit-startup-screen t)
 '(package-selected-packages (quote (company magit))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
* recentf
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'recentf-mode)
(setq-default
 recentf-max-saved-items 1000
 recentf-exclude '("/tmp/" "/ssh:"))
#+END_SRC
* smex
#+BEGIN_SRC emacs-lisp
;; This section get's the simple M-x command handler
;; Use smex to handle M-x
(when (maybe-require-package 'smex)
  ;; Change path for ~/.smex-items
  (setq-default smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (global-set-key [remap execute-extended-command] 'smex))

;; type hyphen instead of space when pressing space
;; found at: https://www.emacswiki.org/emacs/Smex
;; (defadvice smex (around space-inserts-hyphen activate compile)
;;         (let ((ido-cannot-complete-command
;;                `(lambda ()
;;                   (interactive)
;;                   (if (string= " " (this-command-keys))
;;                       (insert ?-)
;;                     (funcall ,ido-cannot-complete-command)))))
;;           ad-do-it))
#+END_SRC
* uniquify
#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Nicer naming of buffers for files with identical names
;;----------------------------------------------------------------------------
(require 'uniquify)

(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator " • ")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")
#+END_SRC
* utils
#+BEGIN_SRC emacs-lisp
(if (fboundp 'with-eval-after-load)
    (defalias 'after-load 'with-eval-after-load)
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body))))

;;----------------------------------------------------------------------------
;; Handier way to add modes to auto-mode-alist
;;----------------------------------------------------------------------------
(defun add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))

;;----------------------------------------------------------------------------
;; String utilities missing from core emacs
;;----------------------------------------------------------------------------
(defun sanityinc/string-all-matches (regex str &optional group)
  "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
  (let ((result nil)
        (pos 0)
        (group (or group 0)))
    (while (string-match regex str pos)
      (push (match-string group str) result)
      (setq pos (match-end group)))
    result))

;;----------------------------------------------------------------------------
;; Delete the current file
;;----------------------------------------------------------------------------
(defun delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

;;----------------------------------------------------------------------------
;; Rename the current file
;;----------------------------------------------------------------------------
(defun rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))

;;----------------------------------------------------------------------------
;; Browse current HTML file
;;----------------------------------------------------------------------------
(defun browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))

;; implement unfill --> is now done via unfill package loaded in init-editing-utils.el
;; (defun xah-fill-or-unfill ()
;;   "Reformat current paragraph or region to `fill-column', like `fill-paragraph' or “unfill”.
;; When there is a text selection, act on the selection, else, act
;; on a text block separated by blank lines.  URL
;; `http://ergoemacs.org/emacs/modernization_fill-paragraph.html'
;; Version 2017-01-08"
;;   (interactive)
;;   ;; This command symbol has a property “'compact-p”, the possible
;;   ;; values are t and nil. This property is used to easily determine
;;   ;; whether to compact or uncompact, when this command is called
;;   ;; again
;;   (let ( ($compact-p
;;           (if (eq last-command this-command)
;;               (get this-command 'compact-p)
;;             (> (- (line-end-position) (line-beginning-position)) fill-column)))
;;          (deactivate-mark nil)
;;          ($blanks-regex "\n[ \t]*\n")
;;          $p1 $p2
;;          )
;;     (if (use-region-p)
;;         (progn (setq $p1 (region-beginning))
;;                (setq $p2 (region-end)))
;;       (save-excursion
;;         (if (re-search-backward $blanks-regex nil "NOERROR")
;;             (progn (re-search-forward $blanks-regex)
;;                    (setq $p1 (point)))
;;           (setq $p1 (point)))
;;         (if (re-search-forward $blanks-regex nil "NOERROR")
;;             (progn (re-search-backward $blanks-regex)
;;                    (setq $p2 (point)))
;;           (setq $p2 (point)))))
;;     (if $compact-p
;;         (fill-region $p1 $p2)
;;       (let ((fill-column most-positive-fixnum ))
;;         (fill-region $p1 $p2)))
;;     (put this-command 'compact-p (not $compact-p))))
;; ;; setup key binding for xah fill unfill
;; (global-set-key (kbd "M-Q") 'xah-fill-or-unfill)

;; comment out as a heading
(defun comment-fill-aligned (arg)
  "Comment out the current line using fill-column to pad and
align with comment chars."
  (interactive "p")
  (comment-normalize-vars)
  (let* ((comment-style 'aligned)
        (beg (line-beginning-position))
        (end (line-end-position))
        (com-add (/ (- fill-column (+ (- end beg) 2)) 2)))
    (comment-region beg end (+ comment-add com-add))
    )
  (end-of-line)
  (if (> (current-column) (+ fill-column 1))
      (delete-backward-char 1)
    ()
   )
  (newline)
  )
(global-set-key (kbd "C-x C") 'comment-fill-aligned)
;; kill the other window buffer
(defun other-window-kill-buffer ()
  "Kill the buffer in the other window"
  (interactive)
  ;; Window selection is used because point goes to a different window
  ;; if more than 2 windows are present
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (select-window win-other)
    (kill-this-buffer)
    (select-window win-curr)))
(global-set-key (kbd "C-x K") 'other-window-kill-buffer)


#+END_SRC
* editing-utils
#+BEGIN_SRC emacs-lisp
(require-package 'unfill)
(require-package 'diminish)

(when (fboundp 'electric-pair-mode)
  (add-hook 'after-init-hook 'electric-pair-mode))
(when (eval-when-compile (version< "24.4" emacs-version))
  (add-hook 'after-init-hook 'electric-indent-mode))

(maybe-require-package 'list-unicode-display)

;;----------------------------------------------------------------------------
;; Some basic preferences
;;----------------------------------------------------------------------------
(setq-default
 blink-cursor-interval 0.4
 bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
 buffers-menu-max-size 30
 case-fold-search t
 column-number-mode t
 delete-selection-mode t
 ediff-split-window-function 'split-window-horizontally
 ediff-window-setup-function 'ediff-setup-windows-plain
 indent-tabs-mode nil
 make-backup-files nil
 mouse-yank-at-point t
 save-interprogram-paste-before-kill t
 scroll-preserve-screen-position 'always
 set-mark-command-repeat-pop t
 tooltip-delay 1.5
 truncate-lines nil
 truncate-partial-width-windows nil)

(add-hook 'after-init-hook 'global-auto-revert-mode)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
(after-load 'autorevert
  (diminish 'auto-revert-mode))

(add-hook 'after-init-hook 'transient-mark-mode)



;; Huge files

(require-package 'vlf)

(defun ffap-vlf ()
  "Find file at point with VLF."
  (interactive)
  (let ((file (ffap-file-at-point)))
    (unless (file-exists-p file)
      (error "File does not exist: %s" file))
    (vlf file)))


;;; A simple visible bell which works in all terminal types
(require-package 'mode-line-bell)
(add-hook 'after-init-hook 'mode-line-bell-mode)



(when (maybe-require-package 'beacon)
  (setq-default beacon-lighter "")
  (setq-default beacon-size 10)
  (add-hook 'after-init-hook 'beacon-mode))



;;; Newline behaviour

(global-set-key (kbd "RET") 'newline-and-indent)
(defun sanityinc/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

(global-set-key (kbd "S-<return>") 'sanityinc/newline-at-end-of-line)



(after-load 'subword
  (diminish 'subword-mode))



(unless (fboundp 'display-line-numbers-mode)
  (require-package 'nlinum))


(when (require-package 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))



;; (when (fboundp 'global-prettify-symbols-mode)
;;  (add-hook 'after-init-hook 'global-prettify-symbols-mode))


(require-package 'undo-tree)
(add-hook 'after-init-hook 'global-undo-tree-mode)
(after-load 'undo-tree
  (diminish 'undo-tree-mode))


(when (maybe-require-package 'symbol-overlay)
  (dolist (hook '(prog-mode-hook html-mode-hook css-mode-hook yaml-mode-hook conf-mode-hook))
    (add-hook hook 'symbol-overlay-mode))
  (after-load 'symbol-overlay
    (diminish 'symbol-overlay-mode)
    (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)))

;;----------------------------------------------------------------------------
;; Zap *up* to char is a handy pair for zap-to-char
;;----------------------------------------------------------------------------
(autoload 'zap-up-to-char "misc" "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-Z") 'zap-up-to-char)



(require-package 'browse-kill-ring)
(setq browse-kill-ring-separator "\f")
(global-set-key (kbd "M-Y") 'browse-kill-ring)
(after-load 'browse-kill-ring
  (define-key browse-kill-ring-mode-map (kbd "C-g") 'browse-kill-ring-quit)
  (define-key browse-kill-ring-mode-map (kbd "M-n") 'browse-kill-ring-forward)
  (define-key browse-kill-ring-mode-map (kbd "M-p") 'browse-kill-ring-previous))
(after-load 'page-break-lines
  (push 'browse-kill-ring-mode page-break-lines-modes))


;;----------------------------------------------------------------------------
;; Don't disable narrowing commands
;;----------------------------------------------------------------------------
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;;----------------------------------------------------------------------------
;; Show matching parens
;;----------------------------------------------------------------------------
(add-hook 'after-init-hook 'show-paren-mode)

;;----------------------------------------------------------------------------
;; Expand region
;;----------------------------------------------------------------------------
(require-package 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)


;;----------------------------------------------------------------------------
;; Don't disable case-change functions
;;----------------------------------------------------------------------------
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)


;;----------------------------------------------------------------------------
;; Rectangle selections, and overwrite text when the selection is active
;;----------------------------------------------------------------------------
;;(cua-selection-mode t)                  ; for rectangles, CUA is nice


;;----------------------------------------------------------------------------
;; Handy key bindings
;;----------------------------------------------------------------------------
(global-set-key (kbd "C-.") 'set-mark-command)
(global-set-key (kbd "C-x C-.") 'pop-global-mark)

(when (maybe-require-package 'avy)
  (global-set-key (kbd "C-;") 'avy-goto-char-timer))

(require-package 'multiple-cursors)
;; multiple-cursors
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-+") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; From active region to multiple cursors:
(global-set-key (kbd "C-c m r") 'set-rectangular-region-anchor)
(global-set-key (kbd "C-c m c") 'mc/edit-lines)
(global-set-key (kbd "C-c m e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-c m a") 'mc/edit-beginnings-of-lines)


;; Train myself to use M-f and M-b instead
(global-unset-key [M-left])
(global-unset-key [M-right])



(defun kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))

(global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)


;;----------------------------------------------------------------------------
;; Page break lines
;;----------------------------------------------------------------------------
(when (maybe-require-package 'page-break-lines)
  (add-hook 'after-init-hook 'global-page-break-lines-mode)
  (after-load 'page-break-lines
    (diminish 'page-break-lines-mode)))

;;----------------------------------------------------------------------------
;; Shift lines up and down with M-up and M-down. When paredit is enabled,
;; it will use those keybindings. For this reason, you might prefer to
;; use M-S-up and M-S-down, which will work even in lisp modes.
;;----------------------------------------------------------------------------
(require-package 'move-dup)
(global-set-key [M-up] 'md/move-lines-up)
(global-set-key [M-down] 'md/move-lines-down)
(global-set-key [M-S-up] 'md/move-lines-up)
(global-set-key [M-S-down] 'md/move-lines-down)

(global-set-key (kbd "C-c d") 'md/duplicate-down)
(global-set-key (kbd "C-c u") 'md/duplicate-up)

;;----------------------------------------------------------------------------
;; Fix backward-up-list to understand quotes, see http://bit.ly/h7mdIL
;;----------------------------------------------------------------------------
(defun backward-up-sexp (arg)
  "Jump up to the start of the ARG'th enclosing sexp."
  (interactive "p")
  (let ((ppss (syntax-ppss)))
    (cond ((elt ppss 3)
           (goto-char (elt ppss 8))
           (backward-up-sexp (1- arg)))
          ((backward-up-list arg)))))

(global-set-key [remap backward-up-list] 'backward-up-sexp) ; C-M-u, C-M-up


;;----------------------------------------------------------------------------
;; Cut/copy the current line if no region is active
;;----------------------------------------------------------------------------
(require-package 'whole-line-or-region)
(add-hook 'after-init-hook 'whole-line-or-region-mode)
(after-load 'whole-line-or-region
  (diminish 'whole-line-or-region-local-mode))

(defun suspend-mode-during-cua-rect-selection (mode-name)
  "Add an advice to suspend `MODE-NAME' while selecting a CUA rectangle."
  (let ((flagvar (intern (format "%s-was-active-before-cua-rectangle" mode-name)))
        (advice-name (intern (format "suspend-%s" mode-name))))
    (eval-after-load 'cua-rect
      `(progn
         (defvar ,flagvar nil)
         (make-variable-buffer-local ',flagvar)
         (defadvice cua--activate-rectangle (after ,advice-name activate)
           (setq ,flagvar (and (boundp ',mode-name) ,mode-name))
           (when ,flagvar
             (,mode-name 0)))
         (defadvice cua--deactivate-rectangle (after ,advice-name activate)
           (when ,flagvar
             (,mode-name 1)))))))

(suspend-mode-during-cua-rect-selection 'whole-line-or-region-mode)




(defun sanityinc/open-line-with-reindent (n)
  "A version of `open-line' which reindents the start and end positions.
If there is a fill prefix and/or a `left-margin', insert them
on the new line if the line would have been blank.
With arg N, insert N newlines."
  (interactive "*p")
  (let* ((do-fill-prefix (and fill-prefix (bolp)))
         (do-left-margin (and (bolp) (> (current-left-margin) 0)))
         (loc (point-marker))
         ;; Don't expand an abbrev before point.
         (abbrev-mode nil))
    (delete-horizontal-space t)
    (newline n)
    (indent-according-to-mode)
    (when (eolp)
      (delete-horizontal-space t))
    (goto-char loc)
    (while (> n 0)
      (cond ((bolp)
             (if do-left-margin (indent-to (current-left-margin)))
             (if do-fill-prefix (insert-and-inherit fill-prefix))))
      (forward-line 1)
      (setq n (1- n)))
    (goto-char loc)
    (end-of-line)
    (indent-according-to-mode)))

(global-set-key (kbd "C-o") 'sanityinc/open-line-with-reindent)


;;----------------------------------------------------------------------------
;; Random line sorting
;;----------------------------------------------------------------------------
(defun sort-lines-random (beg end)
  "Sort lines in region randomly."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ;; To make `end-of-line' and etc. to ignore fields.
          ((inhibit-field-text-motion t))
        (sort-subr nil 'forward-line 'end-of-line nil nil
                   (lambda (s1 s2) (eq (random 2) 0)))))))




(require-package 'highlight-escape-sequences)
(add-hook 'after-init-hook 'hes-mode)


(require-package 'guide-key)
(setq guide-key/guide-key-sequence t)
(add-hook 'after-init-hook 'guide-key-mode)
(after-load 'guide-key
  (diminish 'guide-key-mode))

;;----------------------------------------------------------------------------
;; Edit multiple regions simultaneously
;;----------------------------------------------------------------------------
(require-package 'iedit)
(define-key global-map (kbd "C-c ;") 'iedit-mode)


#+END_SRC
* outline-minor-mode
#+BEGIN_SRC emacs-lisp
;; Outline-minor-mode key map
(define-prefix-command 'cm-map nil "Outline-")
;; HIDE
(define-key cm-map "q" 'outline-hide-sublevels)    ; Hide everything but the top-level headings
(define-key cm-map "t" 'outline-hide-body)         ; Hide everything but headings (all body lines)
(define-key cm-map "o" 'outline-hide-other)        ; Hide other branches
(define-key cm-map "c" 'outline-hide-entry)        ; Hide this entry's body
(define-key cm-map "l" 'outline-hide-leaves)       ; Hide body lines in this entry and sub-entries
(define-key cm-map "d" 'outline-hide-subtree)      ; Hide everything in this entry and sub-entries
;; SHOW
(define-key cm-map "a" 'outline-show-all)          ; Show (expand) everything
(define-key cm-map "e" 'outline-show-entry)        ; Show this heading's body
(define-key cm-map "i" 'outline-show-children)     ; Show this heading's immediate child sub-headings
(define-key cm-map "k" 'outline-show-branches)     ; Show all sub-headings under this heading
(define-key cm-map "s" 'outline-show-subtree)      ; Show (expand) everything in this heading & below
;; MOVE
(define-key cm-map "u" 'outline-up-heading)                ; Up
(define-key cm-map "n" 'outline-next-visible-heading)      ; Next
(define-key cm-map "p" 'outline-previous-visible-heading)  ; Previous
(define-key cm-map "f" 'outline-forward-same-level)        ; Forward - same level
(define-key cm-map "b" 'outline-backward-same-level)       ; Backward - same level
(global-set-key "\M-o" cm-map)
#+END_SRC
* auctex
#+BEGIN_SRC emacs-lisp
(require-package 'auctex)
;;;; some AUCTeX tweaks from and other
;;;; https://www.emacswiki.org/emacs/AUCTeX
;; set pdflatex as auctex compile command
(setq TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
;; enable outline-minor-mode for Auctex
(defun turn-on-outline-minor-mode ()
  (outline-minor-mode 1)
  )
(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;;(setq outline-minor-mode-prefix "\C-c\C-o")
(add-hook 'LaTeX-mode-hook
          '(lambda ()
            (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
;; add frame environment to outline minor mode
(setq TeX-outline-extra
      '(("\\\\begin{frame}[{\[].+" 5))
      )

;; new key binding to show errors
(add-hook 'LaTeX-mode-hook '(lambda () (local-set-key (kbd "C-c e") 'TeX-error-overview)))
#+END_SRC
* multiple cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)

;; add cursors to selection of lines
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; add cursors to same keywords
;; firast mark the word then add cursors
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
;; TODO: enhance ibuffer-fontification-alist
;;   See http://www.reddit.com/r/emacs/comments/21fjpn/fontifying_buffer_list_for_emacs_243/

(require-package 'fullframe)
(after-load 'ibuffer
 (fullframe ibuffer ibuffer-quit))

(require-package 'ibuffer-vc)

(defun ibuffer-set-up-preferred-filters ()
  (ibuffer-vc-set-filter-groups-by-vc-root)
  (unless (eq ibuffer-sorting-mode 'filename/process)
    (ibuffer-do-sort-by-filename/process)))

(add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)

(setq-default ibuffer-show-empty-filter-groups nil)


(after-load 'ibuffer
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size))))))


;; Explicitly require ibuffer-vc to get its column definitions, which
;; can't be autoloaded
(after-load 'ibuffer
  (require 'ibuffer-vc))

;; Modify the default ibuffer-formats (toggle with `)
(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)
        (mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              (vc-status 16 16 :left)
              " "
              filename-and-process)))

(setq ibuffer-filter-group-name-face 'font-lock-doc-face)

(global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
(require-package 'neotree)
(global-set-key [f8] 'neotree-toggle)
(global-set-key [f9] 'neotree-dir)
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
;; TODO: link commits from vc-log to magit-show-commit
;; TODO: smerge-mode
(require-package 'git-blamed)
(require-package 'gitignore-mode)
(require-package 'gitconfig-mode)
(maybe-require-package 'git-timemachine)

;; (when *is-a-windows*
;;  (setenv "GIT_ASKPASS" "git-gui--askpass"))  ;; Configure GIT_ASKPASS environment variable to tell git to use a gui prompt for the user name and the password

(when (maybe-require-package 'magit)
  (setq-default magit-diff-refine-hunk t)

  ;; Hint: customize `magit-repository-directories' so that you can use C-u M-F12 to
  ;; quickly open magit on any one of your projects.
  (global-set-key [(meta f12)] 'magit-status)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))

(after-load 'magit
  (define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-section-up)
  (add-hook 'magit-popup-mode-hook 'sanityinc/no-trailing-whitespace))

(require-package 'fullframe)
(after-load 'magit
  (fullframe magit-status magit-mode-quit-window))

(when (maybe-require-package 'git-commit)
  (add-hook 'git-commit-mode-hook 'goto-address-mode))

(after-load 'compile
  (dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
                      '(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
    (add-to-list 'compilation-error-regexp-alist-alist defn)
    (add-to-list 'compilation-error-regexp-alist (car defn))))

;;;;;;;;; snv-stuff ;;;;;;;;;
;;(defvar git-svn--available-commands nil "Cached list of git svn subcommands")
;;(defun git-svn--available-commands ()
;;  (or git-svn--available-commands
;;      (setq git-svn--available-commands
;;            (sanityinc/string-all-matches
;;             "^  \\([a-z\\-]+\\) +"
;;             (shell-command-to-string "git svn help") 1))))
;;
;;(autoload 'vc-git-root "vc-git")
;;
;;(defun git-svn (dir command)
;;  "Run a git svn subcommand in DIR."
;;  (interactive (list (read-directory-name "Directory: ")
;;                     (completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
;;  (let* ((default-directory (vc-git-root dir))
;;         (compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
;;    (compile (concat "git svn " command))))
;;

;;(maybe-require-package 'git-messenger)
;;;; Though see also vc-annotate's "n" & "p" bindings
;;(after-load 'vc
;;  (setq git-messenger:show-detail t)
;;  (define-key vc-prefix-map (kbd "p") #'git-messenger:popup-message))
;;

#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
;; change bullets
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;; org mode with flyspell-mode
(add-hook 'org-mode-hook 'flyspell-mode)
;; org mode with auto-fill-mode
(add-hook 'org-mode-hook 'auto-fill-mode)
;; custom config for org-latex-export-to-pdf
(setq org-latex-packages-alist
      '((""     "color"     t)
        "\\tolerance=1000"
        "\\definecolor{color1}{rgb}{0.1,0.0,0.7}"
        "\\hypersetup{pdfauthor={Steve Simmert},colorlinks,linkcolor=color1, urlcolor=color1, breaklinks}"))
;;;; Customize Heading font size
;;(custom-set-faces
;; '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
;; '(org-level-2 ((t (:inherit outline-2 :height 1.15))))
;; '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
;; '(org-level-4 ((t (:inherit outline-4 :height 1.05))))
;; '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
;; )

;; display of entities as UTF-8 characters
(setq org-pretty-entities t)

;; (define-key global-map (kbd "C-c l") 'org-store-link)
;; (define-key global-map (kbd "C-c a") 'org-agenda)

(setq org-startup-indented t)

;; Various preferences
(setq org-log-done t
      org-edit-timestamp-down-means-later t
      org-archive-mark-done nil
      org-hide-emphasis-markers t
      org-catch-invisible-edits 'show
      org-export-coding-system 'utf-8
      org-fast-tag-selection-single-key 'expert
      org-html-validation-link nil
      org-export-kill-product-buffer-when-displayed t
      org-tags-column 80
      org-export-backends (quote (ascii html icalendar latex md))
      org-startup-align-all-tables t)

(setq org-support-shift-select t)


;;; To-do settings
;; configuration:
;; (key) -shortcut for C-c C-t key
;; (!) - make a time stamp when keyword is used
;; (@) - ask for a note
;; (/!) - also make timestamp when exiting the keyword
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "|" "DONE(d!)")
              (sequence "PROJECT(p)" "MILESTONE(m)"  "|" "DONE(d!)" "CANCELLED(c@!)")
              (sequence "WAITING(w@/!)" "DELEGATED(e!@)" "HOLD(h)" "|" "DONE(d!)" "CANCELLED(c@!)")))
      ;;org-todo-repeat-to-state "TODO"
      )

;; setup colors for keywords
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "MediumSeaGreen" :weight bold :underline t)
              ("DONE" :foreground "forestgreen")
              ("CANCELLED" :foreground "DarkGreen")
              ;;("MILESTONE" :inherit warning )
              ("MILESTONE" :foreground "orange" :weight bold)
              ;;("PROJECT" :inherit font-lock-string-face)
              ("PROJECT" :foreground "MediumSlateBlue" :weight bold :underline t)
              )))

;; setup colors for ABC priorities
(setq org-priority-faces '((?A . (:foreground "gold" :weight bold))
                           (?B . (:foreground "yellow"))
                           (?C . (:foreground "DarkOliveGreen"))
                           ))

;; automatically set DONE or TODO depending on subtasks
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

;; make unchecked checkboxes block DONE
(setq org-enforce-todo-checkbox-dependencies t)
(setq org-hierarchical-todo-statistics nil)
#+END_SRC
* reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC
